security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    role_hierarchy:
        ROLE_COMPTA: [ROLE_USER]
        ROLE_ADMIN: [ROLE_USER]
        ROLE_ASSISTANTE: [ROLE_USER]
        ROLE_DG: [ROLE_USER, ROLE_ADMIN, ROLE_COMPTA,ROLE_ASSISTANTE, ROLE_PRMP, ROLE_DAF, ROLE_SAD, ROLE_SND, ROLE_RH]
        ROLE_PRMP: [ROLE_USER]
        ROLE_DAF: [ROLE_USER]
        ROLE_SAD: [ROLE_USER]
        ROLE_SND: [ROLE_USER]
        ROLE_RH: [ROLE_USER]
        ROLE_DAJ: [ROLE_USER, ROLE_ADMIN]
        ROLE_SCOFI: [ROLE_USER]
        
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
            provider: app_user_provider
            custom_authenticator: App\Security\UserAuthenticator
            logout:
                path: app_logout
                target: /login
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }           
        - { path: ^/compta, roles: ROLE_COMPTA }
        - { path: ^/assistant, roles: ROLE_ASSISTANTE}
        - { path: ^/personnel, roles: ROLE_RH}
        - { path: ^/DG, roles: ROLE_DG}
        - { path: ^/prmp, roles: ROLE_PRMP}
        - { path: ^/daf, roles: ROLE_DAF}
        - { path: ^/sad, roles: ROLE_SAD}
        - { path: ^/snd, roles: ROLE_SND}
    
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
